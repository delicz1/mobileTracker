@using System.Globalization
@using Microsoft.Ajax.Utilities
@using MobileTracker.Models
@using MobileTracker.Models.Manager
@model System.Collections.Generic.List<MobileTracker.Models.Gps>

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <script type="text/javascript"
            src="http://maps.googleapis.com/maps/api/js?key=AIzaSyANF5u9RkznxMw34aUe2lTL6e6Q-PQVNIQ&sensor=false">
    </script>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    <script type="text/javascript" src="/Scripts/moment-with-langs.min.js"></script>
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript" src="/Scripts/bootstrap-datetimepicker.min.js"></script>
    <link rel="stylesheet" href="/Content/bootstrap-datetimepicker.min.css" />
    <style type="text/css">
        html {
            height: 100%;
        }

        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map-canvas {
            height: 100%;
        }
    </style>

    <script type="text/javascript">
        var script = '<script type="text/javascript" src="/Scripts/markerclusterer';
        if (document.location.search.indexOf('compiled') !== -1) {
            script += '_compiled';
        }
        script += '.js"><' + '/script>';
        document.write(script);
    </script>
    <script type="text/javascript">

    function getAddress(latlng) {
        var result = geocoder.geocode({'latLng': latlng}, function(results, status) {return (status == google.maps.GeocoderStatus.OK && results[1]) ? results[1].formatted_address : '';});

    }

    function initialize()
    {
        var markers = [];
        var point1 = new google.maps.LatLng(@ViewData["minLat"], @ViewData["minLng"]);
        var point2 = new google.maps.LatLng(@ViewData["maxLat"], @ViewData["maxLng"]);
        var bounds = new google.maps.LatLngBounds(point1, point2);
        var mapOptions = {
            //                center: center,
            //                zoom: 3

        };
        var map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
        infowindow = new google.maps.InfoWindow({
            content: "holding..."
        });

        @foreach (var gps in Model)
        {
            @:var time = '@DateManager.ToDateTime(new DateTime(), gps.Time).ToLocalTime().ToString()';
            @:infowindow[i] = new google.maps.InfoWindow({ content: "tady" });
            @:var latLng = new google.maps.LatLng( @(gps.GetLat()), @(gps.GetLng()));
            @:var marker = new google.maps.Marker({ position: latLng,title: time, html: time, map: map});

            @:markers.push(marker);
            @:google.maps.event.addListener(marker, "click", function () {
                @:var geocoder = new google.maps.Geocoder();
                @:infowindow.setContent(this.html);
                @:geocoder.geocode({'latLng': this.position}, function(results, status) {if (status == google.maps.GeocoderStatus.OK && results[1]) { infowindow.setContent(infowindow.getContent() + "<br />" +results[1].formatted_address); } else { console.log(status);}});
            @:infowindow.open(map, this);});
        }

        var markerCluster = new MarkerClusterer(map, markers);

        for (var i = 0; i < markers.length; i++) {
            var marker = markers[i];
            google.maps.event.addListener(marker, 'click', function () {
                // where I have added .html to the marker object.
                infowindow.setContent(this.html);
                infowindow.open(map, this);
            });
        }
        var flightPlanCoordinates = [
            @foreach (var gps in Model)
                {
                    @:new google.maps.LatLng( @(gps.GetLat()), @(gps.GetLng())),
                }
        ];
        var flightPath = new google.maps.Polyline({
            path: flightPlanCoordinates,
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        map.fitBounds(bounds);
        map.panToBounds(bounds);
        flightPath.setMap(map);

        var infowindow = new google.maps.InfoWindow({});
    }
    google.maps.event.addDomListener(window, 'load', initialize);
    </script>
</head>
<body>
    @Html.Partial("_Menu")
    <div style="margin-top: 50px;" id="map-canvas" />
</body>
</html>
